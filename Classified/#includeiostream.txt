#include<iostream>
#include<fstream>
#include<string>
#include<iomanip>
using namespace std;

void menu_edit(int res_num);
void login_register();
void login_user();
void login_manager();
void login_owner();
void menu_display();
void order_food(int res_num);

void login_register()
{
	int user_type;
	cout << "Enter number according to your role:\n1 for User\n2 for Restaurant Manager\n3 for Owner\n4 To exit" << endl;
	cin >> user_type;

	if (user_type > 4 || user_type < 1)
	{
		cout << "Enter number of valid role" << endl;
		cout << "---------------------------------------------------------------------------------------" << endl;
		login_register();
	}

	cout << "---------------------------------------------------------------------------------------" << endl;

	if (user_type == 1)
		login_user();
	else if (user_type == 2)
		login_manager();
	else if (user_type == 3)
		login_owner();
	else if (user_type == 4)
		exit(0);
}

void login_user()
{
	int acc_type;
	cout << "Enter 1 to Login to Existing account\nEnter 2 to Register as a new user" << endl;
	cin >> acc_type;

	if (acc_type == 1)
	{
		string iAcc, iPass;
		cout << "Enter user name: ";
		cin >> iAcc;
		cout << "Enter password: ";
		cin >> iPass;

		fstream user_accounts;
		string acc, pass;
		user_accounts.open("user_accounts.txt");
		while (getline(user_accounts, acc))
		{
			if (acc == iAcc)
			{
				getline(user_accounts, acc);
				if (acc == iPass)
				{
					cout << "Login Successful" << endl;
					break;
				}
				else
				{
					cout << "Invalid password" << endl;
					cout << "---------------------------------------------------------------------------------------" << endl;
					login_user();
				}
			}
			else
			{
				cout << "Invalid username" << endl;
				cout << "---------------------------------------------------------------------------------------" << endl;
				login_user();
			}
		}
		cout << "---------------------------------------------------------------------------------------" << endl;
	}
	else if (acc_type == 2)
	{
		string iAcc, iPass;
		cout << "Enter user name: ";
		cin >> iAcc;

		fstream user_accounts;
		string acc;
		user_accounts.open("user_accounts.txt");
		while (getline(user_accounts, acc))
		{
			if (acc == iAcc)
			{
				cout << "Username already taken" << endl;
				cout << "---------------------------------------------------------------------------------------" << endl;
				login_user();
			}
			else
			{
				cout << "Enter password: ";
				cin >> iPass;

				user_accounts.seekg(0, ios::end);
				user_accounts << iAcc << endl;
				user_accounts << iPass << endl;
				user_accounts.close();

				cout << "Your account is registered and now you can login" << endl;
				cout << "---------------------------------------------------------------------------------------" << endl;
				login_user();
			}
		}
	}
}

void login_manager()
{
	int acc_type;
	cout << "Enter 1 to Login to Existing restaurant\nEnter 2 to Register a new restaurant" << endl;
	cin >> acc_type;

	if (acc_type == 1)
	{
		string iAcc, iPass;
		cout << "Enter restaurant name: ";
		cin >> iAcc;
		cout << "Enter password: ";
		cin >> iPass;

		fstream restraunts;
		string acc, pass;
		restraunts.open("restraunts.txt");
		while (getline(restraunts, acc))
		{
			if (acc == iAcc)
			{
				getline(restraunts, acc);
				if (acc == iPass)
				{
					cout << "Login Successful" << endl;
					break;
				}
				else
				{
					cout << "Invalid password" << endl;
					cout << "---------------------------------------------------------------------------------------" << endl;
					login_manager();
				}
			}
			else
			{
				cout << "Invalid restaurant name" << endl;
				cout << "---------------------------------------------------------------------------------------" << endl;
				login_manager();
			}
		}
		cout << "---------------------------------------------------------------------------------------" << endl;
	}
	else if (acc_type == 2)
	{
		string iAcc, iPass;
		cout << "Enter restaurant name: ";
		cin >> iAcc;

		fstream restraunts;
		string acc;
		restraunts.open("restraunts.txt");
		while (getline(restraunts, acc))
		{
			if (acc == iAcc)
			{
				cout << "Restaurant name already taken" << endl;
				cout << "---------------------------------------------------------------------------------------" << endl;
				login_manager();
			}
			else
			{
				cout << "Enter password: ";
				cin >> iPass;

				restraunts.seekg(0, ios::end);
				restraunts << iAcc << endl;
				restraunts << iPass << endl;
				restraunts.close();

				cout << "Your restaurant is registered and now you can login" << endl;
				cout << "---------------------------------------------------------------------------------------" << endl;
				login_manager();
			}
		}
	}
}

void login_owner()
{
	string iAcc, iPass;
	cout << "Enter owner user name: ";
	cin >> iAcc;
	cout << "Enter password: ";
	cin >> iPass;

	fstream owner;
	string acc, pass;
	owner.open("owner.txt");
	while (getline(owner, acc))
	{
		if (acc == iAcc)
		{
			getline(owner, acc);
			if (acc == iPass)
			{
				cout << "Login Successful" << endl;
				break;
			}
			else
			{
				cout << "Invalid password" << endl;
				cout << "---------------------------------------------------------------------------------------" << endl;
				login_owner();
			}
		}
		else
		{
			cout << "Invalid owner username" << endl;
			cout << "---------------------------------------------------------------------------------------" << endl;
			login_owner();
		}
	}
	cout << "---------------------------------------------------------------------------------------" << endl;
}

void menu_display() {
    cout << "Enter restaurant number:" << endl;
				
    fstream res_name;
    string name;
    int counter = 1, res_num;

    // Display restaurant names
    res_name.open("res_name.txt");
    while (getline(res_name, name)) {
        cout << counter << "\t" << name << endl;
        counter++;
    }
    res_name.close();

    cin >> res_num;
    if (res_num < 1 || res_num > 3) {
        cout << "Invalid restaurant number!" << endl;
        return; // Exit the function
    }

    fstream res_item;
    res_item.open("res_items.txt");
    string item;
    string marker, next_marker;
    if (res_num == 1){
        marker = "*";
        next_marker = "**";
    } 
    else if (res_num == 2) {
        marker = "**";
        next_marker = "***";
    }
    else if (res_num == 3) {
        marker = "***";
        next_marker = "****";
    }
    else {
        cout << "Invalid restaurant number!" << endl;
    }
			
    // Skip to the selected restaurant menu
    while (getline(res_item, item)) {
        if (item == marker) {
            break;
        }
    }

    // Display the menu 
    counter = 1;
    while (getline(res_item, item)) {
        if (item == next_marker) {
            break;
        }
        cout  << "\t" << left << setw(20) << item; // Print item name
        if (getline(res_item, item)) { // Print item price
            cout << right << setw(10) << item << endl;
        }
        counter++;
    }

    res_item.close();
}

void order_food(int res_num)
{
    fstream order;
    order.open("order.txt", ios::out | ios::app);
    string item;
    int quantity;
    string marker, next_marker;
    if (res_num == 1) {
        marker = "*";
        next_marker = "**";
    } 
    else if (res_num == 2) {
        marker = "**";
        next_marker = "***";
    }
    else if (res_num == 3) {
        marker = "***";
        next_marker = "****";
    }
    
    fstream res_item;
    res_item.open("res_items.txt");

    while (getline(res_item, item)) {
        if (item == marker) {
            break;
        }
    }

    while (getline(res_item, item)) {
        if (item == next_marker) {
            break;
        }
        cout << "Enter quantity for " << item << ": ";
        cin >> quantity;
        order << item << endl;
        order << quantity << endl;
    }
    order.close();
}

int main()
{
    login_register();
    
    menu_display();
    
    int res_num;
    cin >> res_num; // Get restaurant number from menu display
    order_food(res_num); // Call order function with appropriate restaurant number

    // Calculate and display the bill
    fstream order;
    order.open("order.txt");
    string item
